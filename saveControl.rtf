{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1036{\fonttbl{\f0\fnil Courier New;}{\f1\fnil\fcharset0 Calibri;}}
{\colortbl ;\red169\green183\blue198;}
{\*\generator Riched20 10.0.17134}\viewkind4\uc1 
\pard\box\brdrdash\brdrw0 \sa200\sl276\slmult1\cf1\f0\fs18\lang12 /*\line  * To change this license header, choose License Headers in Project Properties.\line  * To change this template file, choose Tools | Templates\line  * and open the template in the editor.\line  */\line package listenopolys.controllers;\line\line import java.awt.image.BandedSampleModel;\line import java.io.File;\line import java.net.URL;\line\line import javafx.application.Platform;\line import javafx.beans.InvalidationListener;\line import javafx.beans.Observable;\line import javafx.collections.ObservableList;\line import javafx.scene.chart.AreaChart;\line import javafx.scene.chart.XYChart;\line import javafx.scene.media.AudioSpectrumListener;\line import javafx.stage.FileChooser;\line import javafx.util.Duration;\line\line import java.sql.SQLOutput;\line import java.util.*;\line\line import javafx.fxml.FXML;\line import javafx.fxml.FXMLLoader;\line import javafx.fxml.Initializable;\line <<<<<<< HEAD\line import javafx.scene.control.*;\line import listenopolys.models.*;\line import listenopolys.models.PlaylistService;\line =======\line import javafx.scene.Parent;\line import javafx.scene.Scene;\line import javafx.stage.Stage;\line import javafx.scene.Node;\line\line >>>>>>> f37f4e9bcafa5ee73532b925e088067346a995a2\line\line /**\line  *\line  * @author enmora\line  */\line <<<<<<< HEAD\line public class FXMLController implements Initializable, TrackReaderListener \{\line\line     @FXML\line     private Slider sliderMedia;\line\line     @FXML\line     private Slider sliderVolume;\line\line     @FXML\line     private ListView<Playlist> viewPlaylists;\line\line     @FXML\line     private ListView<Track> viewTracks;\line\line     @FXML\line     private Button buttonPlayPause;\line\line     @FXML\line     private ToggleButton buttonRepeat;\line\line     @FXML\line     private ToggleButton buttonRandom;\line\line     @FXML\line     private Label labelTotalTime;\line\line     @FXML\line     private Label labelCurrentTime;\line     @FXML\line     private AreaChart<String,Number> spektrum;\line\line     private PlaylistService playlists;\line     private TrackReader reader;\line     private boolean repeat;\line     private boolean random;\line     private Timer timer;\line     private List<Integer> randomList;\line     private static final int BANDS = 32;\line     private static final double DROPDOWN = 0.25;\line     private XYChart.Data[] series1Data;\line =======\line public class FXMLController implements Initializable \{\line >>>>>>> f37f4e9bcafa5ee73532b925e088067346a995a2\line\line\line     @Override\line     public void initialize(URL url, ResourceBundle rb) \{\line <<<<<<< HEAD\line         viewPlaylists.setCellFactory(playLv -> new ListCell<Playlist>()\{\line             @Override\line             public void updateItem(Playlist item, boolean empty)\{\line                 super.updateItem(item, empty);\line                 if(empty)\{\line                     setText(null);\line                 \}\line                 else \{\line                     String text = item.getTitle();\line                     setText(text);\line                 \}\line             \}\line         \}\line         );\line         viewTracks.setCellFactory(trackLv -> new ListCell<Track>()\{\line             @Override\line             public void updateItem(Track item, boolean empty)\{\line                 super.updateItem(item, empty);\line                 if(empty)\{\line                     setText(null);\line                 \}\line                 else \{\line                     String text = item.getTitle();\line                     setText(text);\line                 \}\line             \}\line         \}\line         );\line         sliderVolume.valueProperty().addListener(new InvalidationListener()\{\line             @Override\line             public void invalidated(Observable observable)\{\line                 if(reader != null)\{\line                     reader.getPlayer().setVolume(sliderVolume.getValue() / 100.0);\line                 \}\line             \}\line         \});\line\line         XYChart.Series<String, Number> series1 = new XYChart.Series<>();\line         XYChart.Data[] series1Data = new XYChart.Data[BANDS + 2];\line         for (int i = 0; i < series1Data.length; i++) \{\line             series1Data[i] = new XYChart.Data<>(Integer.toString(i + 1), 0);\line             series1.getData().add(series1Data[i]);\line         \}\line         spektrum.getData().add(series1);\line\line\line\line         repeat=false;\line         random=false;\line         playlists = new LoaderFile().load();\line\line         if(playlists==null) playlists = new PlaylistService();\line\line         viewPlaylists.setItems((ObservableList<Playlist>)playlists.getPlaylistList());\line         timer = new Timer();\line     \}\line\line\line\line\line     public void viewPlaylistsClicked()\{\line         if(viewPlaylists.getSelectionModel().getSelectedItem() != null)\line             viewTracks.setItems((ObservableList<Track>) viewPlaylists.getSelectionModel().getSelectedItem().getTracks());\line     \}\line\line     public void viewTracksClicked()\{\line         if(viewTracks.getSelectionModel().getSelectedItem() != null && viewPlaylists.getSelectionModel().getSelectedItem() != null) \{\line             if(reader!=null) \{\line                 reader.stop();\line                 buttonPlayPause.setText("Play");\line             \}\line             reader = new TrackReader(viewTracks.getSelectionModel().getSelectedItem(), repeat);\line             reader.getPlayer().setVolume(sliderVolume.getValue() / 100.0);\line             reader.addListener(this);\line             timer.cancel();\line             timer.purge();\line             Duration dur = viewTracks.getSelectionModel().getSelectedItem().getDuration();\line             labelTotalTime.setText((int)(dur.toMinutes())+":"+(int)(dur.toSeconds())%60);\line             labelCurrentTime.setText("0:0");\line             sliderMedia.setValue(0);\line         \}\line     \}\line\line     public void sliderMediaClickOut()\{\line         if(reader != null) \{\line             reader.getPlayer().seek(viewTracks.getSelectionModel().getSelectedItem().getDuration().multiply(sliderMedia.getValue() / 100.0));\line             timer = new Timer();\line             timer.schedule(new Updater(sliderMedia, labelCurrentTime, reader.getPlayer()), 0, 10);\line         \}\line     \}\line\line     public void sliderMediaClickIn()\{\line         timer.cancel();\line         timer.purge();\line     \}\line\line     public void buttonPlayPauseClicked()\{\line         if(reader == null) return;\line         if(reader.getStatus().equals("PAUSED")||reader.getStatus().equals("READY")||reader.getStatus().equals("STOPPED"))\{\line             reader.play();\line             buttonPlayPause.setText("Pause");\line             timer.cancel();\line             timer.purge();\line             timer = new Timer();\line             timer.schedule(new Updater(sliderMedia, labelCurrentTime, reader.getPlayer()), 0, 10);\line         \}\line         else if(reader.getStatus().equals("PLAYING"))\{\line             reader.pause();\line             buttonPlayPause.setText("Play");\line             timer.cancel();\line             timer.purge();\line         \}\line     \}\line\line     public void buttonStopClicked()\{\line         if(reader != null) \{\line             reader.stop();\line             sliderMedia.setValue(0);\line             labelCurrentTime.setText("0:0");\line             buttonPlayPause.setText("Play");\line             timer.cancel();\line             timer.purge();\line         \}\line     \}\line\line     public void endOfMedia() \{\line         if (!repeat) \{\line             timer.cancel();\line             timer.purge();\line             buttonPlayPause.setText("Play");\line             reader.stop();\line             int nextIndex;\line             if(random)\{\line                 if(randomList.isEmpty())\{\line                     randomizeRandomList();\line                 \}\line                 nextIndex = randomList.remove(0);\line             \}\line             else\line                 nextIndex = (viewTracks.getSelectionModel().getSelectedIndex() + 1 >= viewTracks.getItems().size()) ? 0 : viewTracks.getSelectionModel().getSelectedIndex() + 1;\line             viewTracks.scrollTo(nextIndex);\line             viewTracks.getSelectionModel().select(nextIndex);\line             viewTracks.getFocusModel().focus(nextIndex);\line             viewTracksClicked();\line             reader.getPlayer().setOnReady(() -> \{\line                         buttonPlayPauseClicked();\line                     \}\line             );\line         \}\line     \}\line\line     public void buttonRepeatClicked()\{\line         repeat = !repeat;\line         if(reader!=null) \{\line             reader.setRepeatTo(repeat);\line         \}\line     \}\line\line     private void randomizeRandomList() \{\line         randomList = new ArrayList<>();\line         for (int i =0 ; i<viewTracks.getItems().size() ; i++) randomList.add(i);\line         randomList.remove(viewTracks.getSelectionModel().getSelectedIndex());\line         Collections.shuffle(randomList);\line     \}\line\line     public void buttonRandomClicked()\{\line         random = !random;\line         if(random)\{\line             randomizeRandomList();\line         \}\line     \}\line\line     public void buttonAddTrackClicked()\{\line         if(viewPlaylists.getSelectionModel().getSelectedItem() != null)\{\line             FileChooser fileChooser = new FileChooser();\line             fileChooser.setTitle("Select tracks");\line             fileChooser.setInitialDirectory(new File(System.getProperty("user.home")+"\\\\Music"));\line             fileChooser.getExtensionFilters().add(\line                     new FileChooser.ExtensionFilter("Audio(.mp3, .wav, .aac)", "*.mp3", "*.wav", "*.aac")\line             );\line             List<File> fileList = fileChooser.showOpenMultipleDialog(viewTracks.getScene().getWindow());\line             if(fileList!=null) \{\line                 for (File file : fileList) \{\line                     viewPlaylists.getSelectionModel().getSelectedItem().addTrack(new Track(file.getPath()));\line                 \}\line             \}\line         \}\line     \}\line\line     public void buttonRemoveTrackClicked()\{\line         if(viewTracks.getSelectionModel().getSelectedItem()!=null)\{\line             viewPlaylists.getSelectionModel().getSelectedItem().removeTrack(viewTracks.getSelectionModel().getSelectedItem().getFilePath());\line         \}\line         viewTracksClicked();\line     \}\line\line     private float[] createFilledBuffer(int size, float fillValue) \{\line         float[] floats = new float[size];\line         Arrays.fill(floats, fillValue);\line         return floats;\line     \}\line\line     private class SpektrumListener implements AudioSpectrumListener \{\line         float[] buffer = createFilledBuffer(BANDS, reader.getPlayer().getAudioSpectrumThreshold());\line\line         @Override\line         public void spectrumDataUpdate(double timestamp, double duration, float[] magnitudes, float[] phases) \{\line             Platform.runLater(() -> \{\line                 series1Data[0].setYValue(0);\line                 //noinspection unchecked\line                 series1Data[BANDS + 1].setYValue(0);\line                 for (int i = 0; i < magnitudes.length; i++) \{\line                     if (magnitudes[i] >= buffer[i]) \{\line                         buffer[i] = magnitudes[i];\line                         series1Data[i + 1].setYValue(magnitudes[i] - reader.getPlayer().getAudioSpectrumThreshold());\line                     \} else \{\line                         series1Data[i + 1].setYValue(buffer[i] - reader.getPlayer().getAudioSpectrumThreshold());\line                         buffer[i] -= DROPDOWN;\line                     \}\line                 \}\line             \});\line         \}\line     \}\line     public void close()\{\line         timer.cancel();\line         timer.purge();\line         new SaverFile().save(playlists.getSerializable());\line     \}\line =======\line\line\line     \}\line\line     @FXML\line     private void handleButtonAction(ActionEvent event) throws Exception \{\line\line\line         Parent root = FXMLLoader.load(getClass().getResource("../views/FXMLAddPlaylistView.fxml"));\line         Scene playlist_add_view_scene = new Scene(root);\line         Stage playlistAdd_stage = (Stage) ((Node) event.getSource()).getScene().getWindow();\line         playlistAdd_stage.setScene(playlist_add_view_scene);\line         playlistAdd_stage.show();\line     \}\line\line\line\line >>>>>>> f37f4e9bcafa5ee73532b925e088067346a995a2\line\line\}\line\par

\pard\sa200\sl276\slmult1\cf0\f1\fs22\par
}
 